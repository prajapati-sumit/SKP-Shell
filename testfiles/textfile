The shell runs programs using two core system calls: fork() and execvp(). Read the manual pages
to see how to use them. In short, fork() creates an exact copy of the currently running process, and is
used by the shell to spawn a new process. The execvp() call is used to overlay the currently running
program with a new program, which is how the shell turns a forked process into the program it wants to
run. In addition, the shell must wait until the previously started program. This is done with the wait()
system call or one of its variants (such as waitpid()). All these system calls can fail due to unforeseen
reasons (see their manual pages for details). You should check their return status and report errors if they
occur.
No input the user gives should cause the shell to exit (except when the user types exit or Ctrl+D).
This means your shell should handle errors gracefully, no matter where they occur. Even if an error
occurs in the middle of a long pipeline, it should be reported accurately and your shell should recover
gracefully. You may need to use signal() and kill() system calls. In addition, your shell should
not generate leaking open file descriptors. You can monitor the current open file descriptors of the shell
process through the /proc file system.
Your shell must run in one of two modes: interactive or batch. If no command-line argument is provided,
your shell should interactively accept inputs from the user and execute them. If a batch file of commands
is provided as command-line input to your program, then your shell must execute all commands in the
batch file one after the other.